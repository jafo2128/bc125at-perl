#!/usr/bin/perl

# Copyright (c) 2013 Rikus Goodell. All Rights Reserved.
# This software is distributed free of charge and comes with NO WARRANTY.

use strict;
use warnings;

use Bc125At::Command;
use Bc125At::Interactive;
use Bc125At::Detect;
use Bc125At::Version;
use Getopt::Long 'GetOptionsFromArray';

#my $tty = Bc125At::Detect::probe(); # undef ok
my $scanner = Bc125At::Command->new();
my $prog;

my ($command, $subcommand, @args) = @ARGV;

_usage() unless $command;

$SIG{INT} = sub { exit };

if ($command eq 'channel') {
    _usage() unless $subcommand;
    if ($subcommand eq 'read') {    # read from scanner
        _prog();
        my ($filename, $impatient);
        GetOptionsFromArray(
            \@args,
            'file=s'  => \$filename,
            impatient => \$impatient
          )
          and $filename
          or _usage();
        my $info = $scanner->get_all_channel_info($impatient ? 1 : 0);
        Bc125At::Command::dumper($filename, $info, 'channel');
    }
    elsif ($subcommand eq 'write') {    # write to scanner
        _prog();
        my ($filename);
        GetOptionsFromArray(\@args, 'file=s' => \$filename) and $filename
          or _usage();
        $scanner->write_channels($filename);
    }

}
elsif ($command eq 'search') {
    _usage() unless $subcommand;
    if ($subcommand eq 'read') {
        _prog();
        my $filename;
        GetOptionsFromArray(\@args, 'file=s' => \$filename,) and $filename
          or _usage();
        my $info = $scanner->get_all_search_group_info();
        Bc125At::Command::dumper($filename, $info, 'search');
    }
    elsif ($subcommand eq 'write') {
        _prog();
        my $filename;
        GetOptionsFromArray(\@args, 'file=s' => \$filename) and $filename
          or _usage();
        $scanner->write_search_groups($filename);
    }
}
elsif ($command eq 'interactive') {
    Bc125At::Interactive::run();
}
elsif ($command eq 'detect') {
    Bc125At::Detect::detect();
}
elsif ($command eq 'driver') {
    Bc125At::Detect::setup_driver();
}
else { _usage() }

sub _usage {
    print <<END;
$0 version $Bc125At::Version::version

usage:

$0 channel read --file freqs.txt [--impatient]

   Loads the channels currently stored in the scanner into the
   specified file, which may be edited and then reloaded into the
   scanner. The --impatient option may be used if you want to stop
   trying to load as soon as you hit several frequencies in a row
   which have not been set yet (under the assumption that all
   subsequent frequencies will also be zero).

$0 channel write --file freqs.txt

   Loads the channels defined in freqs.txt and writes them to the
   scanner. WARNING: This is a destructive operation! In other
   words, doing this will cause your existing channels defined
   in the scanner to be overwritten (hopefully with meaningful
   values, but the author of this software takes no responsibility
   for harm or loss of data that may occur as a result of its use).

$0 search read --file search.txt

   Read the search groups from the scanner into the specified text
   file.

$0 search write --file search.txt

   Writes the search groups defined in the specified text file to
   the scanner.

$0 interactive

   Start an interactive session through which commands may be sent
   to the scanner. As of Feb 2013, this document is available from
   Uniden as a reference:
   http://info.uniden.com/twiki/pub/UnidenMan4/BC125AT/BC125AT_PC_Protocol_V1.01.pdf

$0 detect

   Check to see if a compatible device is attached. If this fails,
   then you're not going to have much luck doing anything else.
   Note that this is a passive action and doesn't load the driver.
   If you want to load the driver, use the 'driver' command.

$0 driver

   Attempt to set up the driver for the device. This involves loading
   the 'usbserial' kernel module and creating a device in /dev.

END
    exit 1;
}

sub _prog {
    $prog = 1;
    $scanner->begin_program();
}

END {
    $scanner->end_program() if $prog;
}
